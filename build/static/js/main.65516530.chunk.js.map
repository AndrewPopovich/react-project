{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","name","children","type","onChange","change","value","App","state","persons","age","showPerson","switchNameHandler","_this","setState","onChangeHandler","event","target","deletePersonHandler","index","slice","splice","style","backgroundColor","font","border","padding","cursor","showPersons","map","item","Person_Person","key","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAYeA,eATA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,0BAAiDN,EAAMO,KAAvD,YAAsEP,EAAMQ,UAC5EP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,SAAUV,EAAMW,OAAQC,MAAOZ,EAAMO,UCgFrDM,6MAlFdC,MAAQ,CACPC,QAAS,CACR,CACCR,KAAM,SACNS,IAAK,IAEN,CACCT,KAAM,MACNS,IAAK,IAEN,CACCT,KAAM,QACNS,IAAK,KAGPC,YAAY,KAGbC,kBAAoB,WACnBC,EAAKC,SAAS,CACbH,YAAaE,EAAKL,MAAMG,gBAI1BI,gBAAkB,SAAAC,GACjBH,EAAKC,SAAS,CACbL,QAAS,CAACO,EAAMC,OAAOX,MAAO,MAAOU,EAAMC,OAAOX,YAIpDY,oBAAsB,SAACC,GACtB,IAAMV,EAAUI,EAAKL,MAAMC,QAAQW,QACnCX,EAAQY,OAAOF,EAAO,GACtBN,EAAKC,SAAS,CAACL,QAASA,OAGzBa,MAAQ,CACPC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,aAGTC,YAAc,WACb,IAAInB,EAAU,KAkBd,OAhBII,EAAKL,MAAMG,aACdF,EACCd,EAAAC,EAAAC,cAAA,WACEgB,EAAKL,MAAMC,QAAQoB,IAAI,SAACC,EAAMX,GAC9B,OACCxB,EAAAC,EAAAC,cAACkC,EAAD,CACC9B,KAAM6B,EAAK7B,KACXD,MAAO,kBAAMa,EAAKK,oBAAoBC,IACtCd,OAAQQ,EAAKE,gBACbiB,IAAKb,GAJN,cAWEV,2EAIP,OACCd,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UACCE,QAASkC,KAAKrB,kBACdU,MAAOW,KAAKX,OAFb,eAMCW,KAAKL,sBA5EQM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.65516530.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css';\n\nconst person = (props) => {\n    return (\n        <div className=\"Person\">\n            <p onClick={props.click}>I'm person! My name is {props.name}, test = {props.children}</p>\n            <input type=\"name\" onChange={props.change} value={props.name}/>\n        </div>\n    );\n};\n\nexport default person;","import React, {Component} from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n\tstate = {\n\t\tpersons: [\n\t\t\t{\n\t\t\t\tname: 'Andrew',\n\t\t\t\tage: 24\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Max',\n\t\t\t\tage: 21\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Tanya',\n\t\t\t\tage: 29\n\t\t\t}\n\t\t],\n\t\tshowPerson: false\n\t};\n\n\tswitchNameHandler = () => {\n\t\tthis.setState({\n\t\t\tshowPerson: !this.state.showPerson\n\t\t});\n\t};\n\n\tonChangeHandler = event => {\n\t\tthis.setState({\n\t\t\tpersons: [event.target.value, 'Max', event.target.value],\n\t\t});\n\t};\n\n\tdeletePersonHandler = (index) => {\n\t\tconst persons = this.state.persons.slice();\n\t\tpersons.splice(index, 1);\n\t\tthis.setState({persons: persons});\n\t};\n\n\tstyle = {\n\t\tbackgroundColor: 'white',\n\t\tfont: 'inherit',\n\t\tborder: '1px solid blue',\n\t\tpadding: '8px',\n\t\tcursor: 'pointer'\n\t};\n\n\tshowPersons = () => {\n\t\tlet persons = null;\n\n\t\tif (this.state.showPerson) {\n\t\t\tpersons = (\n\t\t\t\t<div>\n\t\t\t\t\t{this.state.persons.map((item, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Person\n\t\t\t\t\t\t\t\tname={item.name}\n\t\t\t\t\t\t\t\tclick={() => this.deletePersonHandler(index)}\n\t\t\t\t\t\t\t\tchange={this.onChangeHandler}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t> Test </Person>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\treturn persons;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={this.switchNameHandler}\n\t\t\t\t\tstyle={this.style}\n\t\t\t\t>Switch name\n\t\t\t\t</button>\n\t\t\t\t{\n\t\t\t\t\tthis.showPersons()\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t};\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}